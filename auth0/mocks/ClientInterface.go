// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	schema "github.com/mdblp/shoreline/schema"
	mock "github.com/stretchr/testify/mock"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: email
func (_m *ClientInterface) GetUser(email string) (*schema.UserData, error) {
	ret := _m.Called(email)

	var r0 *schema.UserData
	if rf, ok := ret.Get(0).(func(string) *schema.UserData); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.UserData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: id
func (_m *ClientInterface) GetUserById(id string) (*schema.UserData, error) {
	ret := _m.Called(id)

	var r0 *schema.UserData
	if rf, ok := ret.Get(0).(func(string) *schema.UserData); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.UserData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfo provides a mock function with given fields: authHeader
func (_m *ClientInterface) GetUserInfo(authHeader string) (*schema.UserData, error) {
	ret := _m.Called(authHeader)

	var r0 *schema.UserData
	if rf, ok := ret.Get(0).(func(string) *schema.UserData); ok {
		r0 = rf(authHeader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schema.UserData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(authHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, user
func (_m *ClientInterface) UpdateUser(id string, user *schema.UserUpdate) error {
	ret := _m.Called(id, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *schema.UserUpdate) error); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
