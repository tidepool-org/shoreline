// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// AssociateClinicianToUser mocks base method.
func (m *MockClientInterface) AssociateClinicianToUser(ctx context.Context, clinicId ClinicId, inviteId InviteId, body AssociateClinicianToUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateClinicianToUser", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateClinicianToUser indicates an expected call of AssociateClinicianToUser.
func (mr *MockClientInterfaceMockRecorder) AssociateClinicianToUser(ctx, clinicId, inviteId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateClinicianToUser", reflect.TypeOf((*MockClientInterface)(nil).AssociateClinicianToUser), varargs...)
}

// AssociateClinicianToUserWithBody mocks base method.
func (m *MockClientInterface) AssociateClinicianToUserWithBody(ctx context.Context, clinicId ClinicId, inviteId InviteId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateClinicianToUserWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateClinicianToUserWithBody indicates an expected call of AssociateClinicianToUserWithBody.
func (mr *MockClientInterfaceMockRecorder) AssociateClinicianToUserWithBody(ctx, clinicId, inviteId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateClinicianToUserWithBody", reflect.TypeOf((*MockClientInterface)(nil).AssociateClinicianToUserWithBody), varargs...)
}

// CreateClinic mocks base method.
func (m *MockClientInterface) CreateClinic(ctx context.Context, body CreateClinicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinic", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinic indicates an expected call of CreateClinic.
func (mr *MockClientInterfaceMockRecorder) CreateClinic(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinic", reflect.TypeOf((*MockClientInterface)(nil).CreateClinic), varargs...)
}

// CreateClinicWithBody mocks base method.
func (m *MockClientInterface) CreateClinicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinicWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicWithBody indicates an expected call of CreateClinicWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateClinicWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateClinicWithBody), varargs...)
}

// CreateClinician mocks base method.
func (m *MockClientInterface) CreateClinician(ctx context.Context, clinicId ClinicId, body CreateClinicianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinician indicates an expected call of CreateClinician.
func (mr *MockClientInterfaceMockRecorder) CreateClinician(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinician", reflect.TypeOf((*MockClientInterface)(nil).CreateClinician), varargs...)
}

// CreateClinicianWithBody mocks base method.
func (m *MockClientInterface) CreateClinicianWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClinicianWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicianWithBody indicates an expected call of CreateClinicianWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateClinicianWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicianWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateClinicianWithBody), varargs...)
}

// CreatePatientAccount mocks base method.
func (m *MockClientInterface) CreatePatientAccount(ctx context.Context, clinicId ClinicId, body CreatePatientAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientAccount", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientAccount indicates an expected call of CreatePatientAccount.
func (mr *MockClientInterfaceMockRecorder) CreatePatientAccount(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientAccount", reflect.TypeOf((*MockClientInterface)(nil).CreatePatientAccount), varargs...)
}

// CreatePatientAccountWithBody mocks base method.
func (m *MockClientInterface) CreatePatientAccountWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientAccountWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientAccountWithBody indicates an expected call of CreatePatientAccountWithBody.
func (mr *MockClientInterfaceMockRecorder) CreatePatientAccountWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientAccountWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreatePatientAccountWithBody), varargs...)
}

// CreatePatientFromUser mocks base method.
func (m *MockClientInterface) CreatePatientFromUser(ctx context.Context, clinicId ClinicId, patientId PatientId, body CreatePatientFromUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientFromUser", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientFromUser indicates an expected call of CreatePatientFromUser.
func (mr *MockClientInterfaceMockRecorder) CreatePatientFromUser(ctx, clinicId, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientFromUser", reflect.TypeOf((*MockClientInterface)(nil).CreatePatientFromUser), varargs...)
}

// CreatePatientFromUserWithBody mocks base method.
func (m *MockClientInterface) CreatePatientFromUserWithBody(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePatientFromUserWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientFromUserWithBody indicates an expected call of CreatePatientFromUserWithBody.
func (mr *MockClientInterfaceMockRecorder) CreatePatientFromUserWithBody(ctx, clinicId, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientFromUserWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreatePatientFromUserWithBody), varargs...)
}

// DeleteClinician mocks base method.
func (m *MockClientInterface) DeleteClinician(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClinician indicates an expected call of DeleteClinician.
func (mr *MockClientInterfaceMockRecorder) DeleteClinician(ctx, clinicId, clinicianId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClinician", reflect.TypeOf((*MockClientInterface)(nil).DeleteClinician), varargs...)
}

// DeleteInvitedClinician mocks base method.
func (m *MockClientInterface) DeleteInvitedClinician(ctx context.Context, clinicId ClinicId, inviteId InviteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInvitedClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitedClinician indicates an expected call of DeleteInvitedClinician.
func (mr *MockClientInterfaceMockRecorder) DeleteInvitedClinician(ctx, clinicId, inviteId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitedClinician", reflect.TypeOf((*MockClientInterface)(nil).DeleteInvitedClinician), varargs...)
}

// DeletePatientPermission mocks base method.
func (m *MockClientInterface) DeletePatientPermission(ctx context.Context, clinicId ClinicId, patientId PatientId, permission string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, permission}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePatientPermission", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientPermission indicates an expected call of DeletePatientPermission.
func (mr *MockClientInterfaceMockRecorder) DeletePatientPermission(ctx, clinicId, patientId, permission interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, permission}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientPermission", reflect.TypeOf((*MockClientInterface)(nil).DeletePatientPermission), varargs...)
}

// GetClinic mocks base method.
func (m *MockClientInterface) GetClinic(ctx context.Context, clinicId ClinicId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClinic", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinic indicates an expected call of GetClinic.
func (mr *MockClientInterfaceMockRecorder) GetClinic(ctx, clinicId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinic", reflect.TypeOf((*MockClientInterface)(nil).GetClinic), varargs...)
}

// GetClinician mocks base method.
func (m *MockClientInterface) GetClinician(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinician indicates an expected call of GetClinician.
func (mr *MockClientInterfaceMockRecorder) GetClinician(ctx, clinicId, clinicianId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinician", reflect.TypeOf((*MockClientInterface)(nil).GetClinician), varargs...)
}

// GetInvitedClinician mocks base method.
func (m *MockClientInterface) GetInvitedClinician(ctx context.Context, clinicId ClinicId, inviteId InviteId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, inviteId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvitedClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitedClinician indicates an expected call of GetInvitedClinician.
func (mr *MockClientInterfaceMockRecorder) GetInvitedClinician(ctx, clinicId, inviteId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, inviteId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitedClinician", reflect.TypeOf((*MockClientInterface)(nil).GetInvitedClinician), varargs...)
}

// GetPatient mocks base method.
func (m *MockClientInterface) GetPatient(ctx context.Context, clinicId ClinicId, patientId PatientId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPatient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatient indicates an expected call of GetPatient.
func (mr *MockClientInterfaceMockRecorder) GetPatient(ctx, clinicId, patientId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatient", reflect.TypeOf((*MockClientInterface)(nil).GetPatient), varargs...)
}

// ListClinicians mocks base method.
func (m *MockClientInterface) ListClinicians(ctx context.Context, clinicId ClinicId, params *ListCliniciansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinicians", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicians indicates an expected call of ListClinicians.
func (mr *MockClientInterfaceMockRecorder) ListClinicians(ctx, clinicId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicians", reflect.TypeOf((*MockClientInterface)(nil).ListClinicians), varargs...)
}

// ListClinics mocks base method.
func (m *MockClientInterface) ListClinics(ctx context.Context, params *ListClinicsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinics indicates an expected call of ListClinics.
func (mr *MockClientInterfaceMockRecorder) ListClinics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinics", reflect.TypeOf((*MockClientInterface)(nil).ListClinics), varargs...)
}

// ListClinicsForClinician mocks base method.
func (m *MockClientInterface) ListClinicsForClinician(ctx context.Context, userId UserId, params *ListClinicsForClinicianParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinicsForClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicsForClinician indicates an expected call of ListClinicsForClinician.
func (mr *MockClientInterfaceMockRecorder) ListClinicsForClinician(ctx, userId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicsForClinician", reflect.TypeOf((*MockClientInterface)(nil).ListClinicsForClinician), varargs...)
}

// ListClinicsForPatient mocks base method.
func (m *MockClientInterface) ListClinicsForPatient(ctx context.Context, userId UserId, params *ListClinicsForPatientParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, userId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClinicsForPatient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicsForPatient indicates an expected call of ListClinicsForPatient.
func (mr *MockClientInterfaceMockRecorder) ListClinicsForPatient(ctx, userId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, userId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicsForPatient", reflect.TypeOf((*MockClientInterface)(nil).ListClinicsForPatient), varargs...)
}

// ListPatients mocks base method.
func (m *MockClientInterface) ListPatients(ctx context.Context, clinicId ClinicId, params *ListPatientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPatients", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPatients indicates an expected call of ListPatients.
func (mr *MockClientInterfaceMockRecorder) ListPatients(ctx, clinicId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPatients", reflect.TypeOf((*MockClientInterface)(nil).ListPatients), varargs...)
}

// UpdateClinic mocks base method.
func (m *MockClientInterface) UpdateClinic(ctx context.Context, clinicId ClinicId, body UpdateClinicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinic", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinic indicates an expected call of UpdateClinic.
func (mr *MockClientInterfaceMockRecorder) UpdateClinic(ctx, clinicId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinic", reflect.TypeOf((*MockClientInterface)(nil).UpdateClinic), varargs...)
}

// UpdateClinicWithBody mocks base method.
func (m *MockClientInterface) UpdateClinicWithBody(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicWithBody indicates an expected call of UpdateClinicWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateClinicWithBody(ctx, clinicId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateClinicWithBody), varargs...)
}

// UpdateClinician mocks base method.
func (m *MockClientInterface) UpdateClinician(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, body UpdateClinicianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinician", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinician indicates an expected call of UpdateClinician.
func (mr *MockClientInterfaceMockRecorder) UpdateClinician(ctx, clinicId, clinicianId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinician", reflect.TypeOf((*MockClientInterface)(nil).UpdateClinician), varargs...)
}

// UpdateClinicianWithBody mocks base method.
func (m *MockClientInterface) UpdateClinicianWithBody(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, clinicianId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClinicianWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicianWithBody indicates an expected call of UpdateClinicianWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateClinicianWithBody(ctx, clinicId, clinicianId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, clinicianId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicianWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateClinicianWithBody), varargs...)
}

// UpdatePatient mocks base method.
func (m *MockClientInterface) UpdatePatient(ctx context.Context, clinicId ClinicId, patientId PatientId, body UpdatePatientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatient", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatient indicates an expected call of UpdatePatient.
func (mr *MockClientInterfaceMockRecorder) UpdatePatient(ctx, clinicId, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatient", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatient), varargs...)
}

// UpdatePatientPermissions mocks base method.
func (m *MockClientInterface) UpdatePatientPermissions(ctx context.Context, clinicId ClinicId, patientId PatientId, body UpdatePatientPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientPermissions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientPermissions indicates an expected call of UpdatePatientPermissions.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientPermissions(ctx, clinicId, patientId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientPermissions", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientPermissions), varargs...)
}

// UpdatePatientPermissionsWithBody mocks base method.
func (m *MockClientInterface) UpdatePatientPermissionsWithBody(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientPermissionsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientPermissionsWithBody indicates an expected call of UpdatePatientPermissionsWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientPermissionsWithBody(ctx, clinicId, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientPermissionsWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientPermissionsWithBody), varargs...)
}

// UpdatePatientWithBody mocks base method.
func (m *MockClientInterface) UpdatePatientWithBody(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clinicId, patientId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePatientWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientWithBody indicates an expected call of UpdatePatientWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdatePatientWithBody(ctx, clinicId, patientId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clinicId, patientId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdatePatientWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// AssociateClinicianToUserWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AssociateClinicianToUserWithBodyWithResponse(ctx context.Context, clinicId ClinicId, inviteId InviteId, contentType string, body io.Reader) (*AssociateClinicianToUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateClinicianToUserWithBodyWithResponse", ctx, clinicId, inviteId, contentType, body)
	ret0, _ := ret[0].(*AssociateClinicianToUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateClinicianToUserWithBodyWithResponse indicates an expected call of AssociateClinicianToUserWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AssociateClinicianToUserWithBodyWithResponse(ctx, clinicId, inviteId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateClinicianToUserWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AssociateClinicianToUserWithBodyWithResponse), ctx, clinicId, inviteId, contentType, body)
}

// AssociateClinicianToUserWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AssociateClinicianToUserWithResponse(ctx context.Context, clinicId ClinicId, inviteId InviteId, body AssociateClinicianToUserJSONRequestBody) (*AssociateClinicianToUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateClinicianToUserWithResponse", ctx, clinicId, inviteId, body)
	ret0, _ := ret[0].(*AssociateClinicianToUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateClinicianToUserWithResponse indicates an expected call of AssociateClinicianToUserWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AssociateClinicianToUserWithResponse(ctx, clinicId, inviteId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateClinicianToUserWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AssociateClinicianToUserWithResponse), ctx, clinicId, inviteId, body)
}

// CreateClinicWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateClinicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateClinicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClinicWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*CreateClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicWithBodyWithResponse indicates an expected call of CreateClinicWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateClinicWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateClinicWithBodyWithResponse), ctx, contentType, body)
}

// CreateClinicWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateClinicWithResponse(ctx context.Context, body CreateClinicJSONRequestBody) (*CreateClinicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClinicWithResponse", ctx, body)
	ret0, _ := ret[0].(*CreateClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicWithResponse indicates an expected call of CreateClinicWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateClinicWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateClinicWithResponse), ctx, body)
}

// CreateClinicianWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateClinicianWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader) (*CreateClinicianResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClinicianWithBodyWithResponse", ctx, clinicId, contentType, body)
	ret0, _ := ret[0].(*CreateClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicianWithBodyWithResponse indicates an expected call of CreateClinicianWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateClinicianWithBodyWithResponse(ctx, clinicId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicianWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateClinicianWithBodyWithResponse), ctx, clinicId, contentType, body)
}

// CreateClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateClinicianWithResponse(ctx context.Context, clinicId ClinicId, body CreateClinicianJSONRequestBody) (*CreateClinicianResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClinicianWithResponse", ctx, clinicId, body)
	ret0, _ := ret[0].(*CreateClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClinicianWithResponse indicates an expected call of CreateClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateClinicianWithResponse(ctx, clinicId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateClinicianWithResponse), ctx, clinicId, body)
}

// CreatePatientAccountWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePatientAccountWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader) (*CreatePatientAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatientAccountWithBodyWithResponse", ctx, clinicId, contentType, body)
	ret0, _ := ret[0].(*CreatePatientAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientAccountWithBodyWithResponse indicates an expected call of CreatePatientAccountWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePatientAccountWithBodyWithResponse(ctx, clinicId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientAccountWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePatientAccountWithBodyWithResponse), ctx, clinicId, contentType, body)
}

// CreatePatientAccountWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePatientAccountWithResponse(ctx context.Context, clinicId ClinicId, body CreatePatientAccountJSONRequestBody) (*CreatePatientAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatientAccountWithResponse", ctx, clinicId, body)
	ret0, _ := ret[0].(*CreatePatientAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientAccountWithResponse indicates an expected call of CreatePatientAccountWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePatientAccountWithResponse(ctx, clinicId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientAccountWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePatientAccountWithResponse), ctx, clinicId, body)
}

// CreatePatientFromUserWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePatientFromUserWithBodyWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader) (*CreatePatientFromUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatientFromUserWithBodyWithResponse", ctx, clinicId, patientId, contentType, body)
	ret0, _ := ret[0].(*CreatePatientFromUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientFromUserWithBodyWithResponse indicates an expected call of CreatePatientFromUserWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePatientFromUserWithBodyWithResponse(ctx, clinicId, patientId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientFromUserWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePatientFromUserWithBodyWithResponse), ctx, clinicId, patientId, contentType, body)
}

// CreatePatientFromUserWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreatePatientFromUserWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, body CreatePatientFromUserJSONRequestBody) (*CreatePatientFromUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatientFromUserWithResponse", ctx, clinicId, patientId, body)
	ret0, _ := ret[0].(*CreatePatientFromUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatientFromUserWithResponse indicates an expected call of CreatePatientFromUserWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreatePatientFromUserWithResponse(ctx, clinicId, patientId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatientFromUserWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreatePatientFromUserWithResponse), ctx, clinicId, patientId, body)
}

// DeleteClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteClinicianWithResponse(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId) (*DeleteClinicianResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClinicianWithResponse", ctx, clinicId, clinicianId)
	ret0, _ := ret[0].(*DeleteClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClinicianWithResponse indicates an expected call of DeleteClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteClinicianWithResponse(ctx, clinicId, clinicianId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteClinicianWithResponse), ctx, clinicId, clinicianId)
}

// DeleteInvitedClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteInvitedClinicianWithResponse(ctx context.Context, clinicId ClinicId, inviteId InviteId) (*DeleteInvitedClinicianResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitedClinicianWithResponse", ctx, clinicId, inviteId)
	ret0, _ := ret[0].(*DeleteInvitedClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitedClinicianWithResponse indicates an expected call of DeleteInvitedClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteInvitedClinicianWithResponse(ctx, clinicId, inviteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitedClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteInvitedClinicianWithResponse), ctx, clinicId, inviteId)
}

// DeletePatientPermissionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeletePatientPermissionWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, permission string) (*DeletePatientPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatientPermissionWithResponse", ctx, clinicId, patientId, permission)
	ret0, _ := ret[0].(*DeletePatientPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePatientPermissionWithResponse indicates an expected call of DeletePatientPermissionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeletePatientPermissionWithResponse(ctx, clinicId, patientId, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientPermissionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeletePatientPermissionWithResponse), ctx, clinicId, patientId, permission)
}

// GetClinicWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetClinicWithResponse(ctx context.Context, clinicId ClinicId) (*GetClinicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClinicWithResponse", ctx, clinicId)
	ret0, _ := ret[0].(*GetClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinicWithResponse indicates an expected call of GetClinicWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetClinicWithResponse(ctx, clinicId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinicWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetClinicWithResponse), ctx, clinicId)
}

// GetClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetClinicianWithResponse(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId) (*GetClinicianResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClinicianWithResponse", ctx, clinicId, clinicianId)
	ret0, _ := ret[0].(*GetClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClinicianWithResponse indicates an expected call of GetClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetClinicianWithResponse(ctx, clinicId, clinicianId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetClinicianWithResponse), ctx, clinicId, clinicianId)
}

// GetInvitedClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetInvitedClinicianWithResponse(ctx context.Context, clinicId ClinicId, inviteId InviteId) (*GetInvitedClinicianResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitedClinicianWithResponse", ctx, clinicId, inviteId)
	ret0, _ := ret[0].(*GetInvitedClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitedClinicianWithResponse indicates an expected call of GetInvitedClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetInvitedClinicianWithResponse(ctx, clinicId, inviteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitedClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetInvitedClinicianWithResponse), ctx, clinicId, inviteId)
}

// GetPatientWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetPatientWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId) (*GetPatientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientWithResponse", ctx, clinicId, patientId)
	ret0, _ := ret[0].(*GetPatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientWithResponse indicates an expected call of GetPatientWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetPatientWithResponse(ctx, clinicId, patientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetPatientWithResponse), ctx, clinicId, patientId)
}

// ListCliniciansWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListCliniciansWithResponse(ctx context.Context, clinicId ClinicId, params *ListCliniciansParams) (*ListCliniciansResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCliniciansWithResponse", ctx, clinicId, params)
	ret0, _ := ret[0].(*ListCliniciansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCliniciansWithResponse indicates an expected call of ListCliniciansWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListCliniciansWithResponse(ctx, clinicId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCliniciansWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListCliniciansWithResponse), ctx, clinicId, params)
}

// ListClinicsForClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListClinicsForClinicianWithResponse(ctx context.Context, userId UserId, params *ListClinicsForClinicianParams) (*ListClinicsForClinicianResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClinicsForClinicianWithResponse", ctx, userId, params)
	ret0, _ := ret[0].(*ListClinicsForClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicsForClinicianWithResponse indicates an expected call of ListClinicsForClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListClinicsForClinicianWithResponse(ctx, userId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicsForClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListClinicsForClinicianWithResponse), ctx, userId, params)
}

// ListClinicsForPatientWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListClinicsForPatientWithResponse(ctx context.Context, userId UserId, params *ListClinicsForPatientParams) (*ListClinicsForPatientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClinicsForPatientWithResponse", ctx, userId, params)
	ret0, _ := ret[0].(*ListClinicsForPatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicsForPatientWithResponse indicates an expected call of ListClinicsForPatientWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListClinicsForPatientWithResponse(ctx, userId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicsForPatientWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListClinicsForPatientWithResponse), ctx, userId, params)
}

// ListClinicsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListClinicsWithResponse(ctx context.Context, params *ListClinicsParams) (*ListClinicsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClinicsWithResponse", ctx, params)
	ret0, _ := ret[0].(*ListClinicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClinicsWithResponse indicates an expected call of ListClinicsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListClinicsWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClinicsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListClinicsWithResponse), ctx, params)
}

// ListPatientsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListPatientsWithResponse(ctx context.Context, clinicId ClinicId, params *ListPatientsParams) (*ListPatientsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPatientsWithResponse", ctx, clinicId, params)
	ret0, _ := ret[0].(*ListPatientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPatientsWithResponse indicates an expected call of ListPatientsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListPatientsWithResponse(ctx, clinicId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPatientsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListPatientsWithResponse), ctx, clinicId, params)
}

// UpdateClinicWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateClinicWithBodyWithResponse(ctx context.Context, clinicId ClinicId, contentType string, body io.Reader) (*UpdateClinicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClinicWithBodyWithResponse", ctx, clinicId, contentType, body)
	ret0, _ := ret[0].(*UpdateClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicWithBodyWithResponse indicates an expected call of UpdateClinicWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateClinicWithBodyWithResponse(ctx, clinicId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateClinicWithBodyWithResponse), ctx, clinicId, contentType, body)
}

// UpdateClinicWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateClinicWithResponse(ctx context.Context, clinicId ClinicId, body UpdateClinicJSONRequestBody) (*UpdateClinicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClinicWithResponse", ctx, clinicId, body)
	ret0, _ := ret[0].(*UpdateClinicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicWithResponse indicates an expected call of UpdateClinicWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateClinicWithResponse(ctx, clinicId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateClinicWithResponse), ctx, clinicId, body)
}

// UpdateClinicianWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateClinicianWithBodyWithResponse(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, contentType string, body io.Reader) (*UpdateClinicianResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClinicianWithBodyWithResponse", ctx, clinicId, clinicianId, contentType, body)
	ret0, _ := ret[0].(*UpdateClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicianWithBodyWithResponse indicates an expected call of UpdateClinicianWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateClinicianWithBodyWithResponse(ctx, clinicId, clinicianId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicianWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateClinicianWithBodyWithResponse), ctx, clinicId, clinicianId, contentType, body)
}

// UpdateClinicianWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateClinicianWithResponse(ctx context.Context, clinicId ClinicId, clinicianId ClinicianId, body UpdateClinicianJSONRequestBody) (*UpdateClinicianResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClinicianWithResponse", ctx, clinicId, clinicianId, body)
	ret0, _ := ret[0].(*UpdateClinicianResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClinicianWithResponse indicates an expected call of UpdateClinicianWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateClinicianWithResponse(ctx, clinicId, clinicianId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClinicianWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateClinicianWithResponse), ctx, clinicId, clinicianId, body)
}

// UpdatePatientPermissionsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientPermissionsWithBodyWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader) (*UpdatePatientPermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatientPermissionsWithBodyWithResponse", ctx, clinicId, patientId, contentType, body)
	ret0, _ := ret[0].(*UpdatePatientPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientPermissionsWithBodyWithResponse indicates an expected call of UpdatePatientPermissionsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientPermissionsWithBodyWithResponse(ctx, clinicId, patientId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientPermissionsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientPermissionsWithBodyWithResponse), ctx, clinicId, patientId, contentType, body)
}

// UpdatePatientPermissionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientPermissionsWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, body UpdatePatientPermissionsJSONRequestBody) (*UpdatePatientPermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatientPermissionsWithResponse", ctx, clinicId, patientId, body)
	ret0, _ := ret[0].(*UpdatePatientPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientPermissionsWithResponse indicates an expected call of UpdatePatientPermissionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientPermissionsWithResponse(ctx, clinicId, patientId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientPermissionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientPermissionsWithResponse), ctx, clinicId, patientId, body)
}

// UpdatePatientWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientWithBodyWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, contentType string, body io.Reader) (*UpdatePatientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatientWithBodyWithResponse", ctx, clinicId, patientId, contentType, body)
	ret0, _ := ret[0].(*UpdatePatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientWithBodyWithResponse indicates an expected call of UpdatePatientWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientWithBodyWithResponse(ctx, clinicId, patientId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientWithBodyWithResponse), ctx, clinicId, patientId, contentType, body)
}

// UpdatePatientWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdatePatientWithResponse(ctx context.Context, clinicId ClinicId, patientId PatientId, body UpdatePatientJSONRequestBody) (*UpdatePatientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatientWithResponse", ctx, clinicId, patientId, body)
	ret0, _ := ret[0].(*UpdatePatientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePatientWithResponse indicates an expected call of UpdatePatientWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdatePatientWithResponse(ctx, clinicId, patientId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdatePatientWithResponse), ctx, clinicId, patientId, body)
}
